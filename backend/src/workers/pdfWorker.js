require('dotenv').config();
require('module-alias/register');

const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
const loadAllModels = () => {
  // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –º–æ–¥–µ–ª—è–º–∏
  const modelsDir = path.join(__dirname, '../models/appModels');

  // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  fs.readdirSync(modelsDir).forEach((file) => {
    if (file.endsWith('.js')) {
      require(path.join(modelsDir, file));
      console.log(`–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${file}`);
    }
  });
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
loadAllModels();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
//console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:', Object.keys(mongoose.models).join(', '));

const pdfQueue = require('../queues/pdfQueue');
const { generatePdf } = require('../services/pdfService');
const Invoice = mongoose.model('Invoice');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
  .connect(process.env.DATABASE, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log('Worker –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
  })
  .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
pdfQueue.process(async (job, done) => {
  const { invoiceId } = job.data;
  console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è invoice:', invoiceId);

  try {
    const invoice = await Invoice.findById(invoiceId).populate('client').exec();

    if (!invoice) {
      throw new Error('Invoice not found');
    }

    console.log('üìÑ Invoice –Ω–∞–π–¥–µ–Ω:', invoice._id);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
    const html = `
      <h1>Invoice #${invoice.number || 'No Number'}</h1>
      <p>Customer: ${invoice.client ? invoice.client.name : 'N/A'}</p>
      <p>Date: ${new Date(invoice.created).toLocaleDateString()}</p>
      <p>Total: ${invoice.total || 0}</p>
    `;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    const fileName = `invoice-${invoiceId}.pdf`;
    const filePath = await generatePdf(invoiceId, html);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await Invoice.findByIdAndUpdate(invoiceId, { pdf: path.basename(filePath) });

    console.log(`‚úÖ PDF —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ invoice: ${filePath}`);
    done(null, { success: true, filePath });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', err);
    done(err);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
pdfQueue.on('failed', (job, err) => {
  console.error(`‚ùå –ó–∞–¥–∞—á–∞ ${job.id} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`, err.message);
});

pdfQueue.on('ready', () => {
  console.log('üöÄ PDF Worker –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á');
});

pdfQueue.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏:', err);
});
